import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext } from '../http/http';
import { App } from '../models/App';
import { CancelNotificationSuccessResponse } from '../models/CancelNotificationSuccessResponse';
import { CreateNotificationSuccessResponse } from '../models/CreateNotificationSuccessResponse';
import { CreatePlayerSuccessResponse } from '../models/CreatePlayerSuccessResponse';
import { CreateSegmentSuccessResponse } from '../models/CreateSegmentSuccessResponse';
import { DeletePlayerSuccessResponse } from '../models/DeletePlayerSuccessResponse';
import { DeleteSegmentSuccessResponse } from '../models/DeleteSegmentSuccessResponse';
import { ExportPlayersRequestBody } from '../models/ExportPlayersRequestBody';
import { ExportPlayersSuccessResponse } from '../models/ExportPlayersSuccessResponse';
import { GetNotificationRequestBody } from '../models/GetNotificationRequestBody';
import { Notification } from '../models/Notification';
import { NotificationHistorySuccessResponse } from '../models/NotificationHistorySuccessResponse';
import { NotificationSlice } from '../models/NotificationSlice';
import { NotificationWithMeta } from '../models/NotificationWithMeta';
import { OutcomesData } from '../models/OutcomesData';
import { Player } from '../models/Player';
import { PlayerSlice } from '../models/PlayerSlice';
import { Segment } from '../models/Segment';
import { UpdatePlayerSuccessResponse } from '../models/UpdatePlayerSuccessResponse';
import { UpdatePlayerTagsRequestBody } from '../models/UpdatePlayerTagsRequestBody';
import { UpdatePlayerTagsSuccessResponse } from '../models/UpdatePlayerTagsSuccessResponse';
export declare class DefaultApiRequestFactory extends BaseAPIRequestFactory {
    cancelNotification(appId: string, notificationId: string, _options?: Configuration): Promise<RequestContext>;
    createApp(app: App, _options?: Configuration): Promise<RequestContext>;
    createNotification(notification: Notification, _options?: Configuration): Promise<RequestContext>;
    createPlayer(player: Player, _options?: Configuration): Promise<RequestContext>;
    createSegments(appId: string, segment?: Segment, _options?: Configuration): Promise<RequestContext>;
    deletePlayer(appId: string, playerId: string, _options?: Configuration): Promise<RequestContext>;
    deleteSegments(appId: string, segmentId: string, _options?: Configuration): Promise<RequestContext>;
    exportPlayers(appId: string, exportPlayersRequestBody?: ExportPlayersRequestBody, _options?: Configuration): Promise<RequestContext>;
    getApp(appId: string, _options?: Configuration): Promise<RequestContext>;
    getApps(_options?: Configuration): Promise<RequestContext>;
    getNotification(appId: string, notificationId: string, _options?: Configuration): Promise<RequestContext>;
    getNotificationHistory(notificationId: string, getNotificationRequestBody: GetNotificationRequestBody, _options?: Configuration): Promise<RequestContext>;
    getNotifications(appId: string, limit?: number, offset?: number, kind?: 0 | 1 | 3, _options?: Configuration): Promise<RequestContext>;
    getOutcomes(appId: string, outcomeNames: string, outcomeNames2?: string, outcomeTimeRange?: string, outcomePlatforms?: string, outcomeAttribution?: string, _options?: Configuration): Promise<RequestContext>;
    getPlayer(appId: string, playerId: string, emailAuthHash?: string, _options?: Configuration): Promise<RequestContext>;
    getPlayers(appId: string, limit?: number, offset?: number, _options?: Configuration): Promise<RequestContext>;
    updateApp(appId: string, app: App, _options?: Configuration): Promise<RequestContext>;
    updatePlayer(playerId: string, player: Player, _options?: Configuration): Promise<RequestContext>;
    updatePlayerTags(appId: string, externalUserId: string, updatePlayerTagsRequestBody?: UpdatePlayerTagsRequestBody, _options?: Configuration): Promise<RequestContext>;
}
export declare class DefaultApiResponseProcessor {
    cancelNotification(response: ResponseContext): Promise<CancelNotificationSuccessResponse>;
    createApp(response: ResponseContext): Promise<App>;
    createNotification(response: ResponseContext): Promise<CreateNotificationSuccessResponse>;
    createPlayer(response: ResponseContext): Promise<CreatePlayerSuccessResponse>;
    createSegments(response: ResponseContext): Promise<CreateSegmentSuccessResponse>;
    deletePlayer(response: ResponseContext): Promise<DeletePlayerSuccessResponse>;
    deleteSegments(response: ResponseContext): Promise<DeleteSegmentSuccessResponse>;
    exportPlayers(response: ResponseContext): Promise<ExportPlayersSuccessResponse>;
    getApp(response: ResponseContext): Promise<App>;
    getApps(response: ResponseContext): Promise<Array<App>>;
    getNotification(response: ResponseContext): Promise<NotificationWithMeta>;
    getNotificationHistory(response: ResponseContext): Promise<NotificationHistorySuccessResponse>;
    getNotifications(response: ResponseContext): Promise<NotificationSlice>;
    getOutcomes(response: ResponseContext): Promise<OutcomesData>;
    getPlayer(response: ResponseContext): Promise<Player>;
    getPlayers(response: ResponseContext): Promise<PlayerSlice>;
    updateApp(response: ResponseContext): Promise<App>;
    updatePlayer(response: ResponseContext): Promise<UpdatePlayerSuccessResponse>;
    updatePlayerTags(response: ResponseContext): Promise<UpdatePlayerTagsSuccessResponse>;
}
